
Prak3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000577  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004dd  00000000  00000000  000006fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d2  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1d d0       	rcall	.+58     	; 0x6e <main>
  34:	29 c0       	rjmp	.+82     	; 0x88 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <init>:
#include <avr/io.h>
#define F_CPU 1000000UL
#include <util/delay.h>

void init(){
	DDRB |= (1 << PB0) | (1 << PB1);
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	83 60       	ori	r24, 0x03	; 3
  3c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0;	//DDRD als Eingang
  3e:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;	//PullUps auf PORTD einschalten
  40:	8f ef       	ldi	r24, 0xFF	; 255
  42:	82 bb       	out	0x12, r24	; 18
  44:	08 95       	ret

00000046 <Taster1_pressed>:
}

int Taster1_pressed(){
	if(PIND == (PIND ^ (1 << PD2)))
  46:	40 b3       	in	r20, 0x10	; 16
  48:	90 b3       	in	r25, 0x10	; 16
  4a:	84 e0       	ldi	r24, 0x04	; 4
  4c:	98 27       	eor	r25, r24
  4e:	21 e0       	ldi	r18, 0x01	; 1
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	94 17       	cp	r25, r20
  54:	11 f0       	breq	.+4      	; 0x5a <Taster1_pressed+0x14>
  56:	20 e0       	ldi	r18, 0x00	; 0
  58:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	else
		return 0;
}
  5a:	c9 01       	movw	r24, r18
  5c:	08 95       	ret

0000005e <Taster2_pressed>:

int Taster2_pressed(){
	if(PIND == 0xfa)
  5e:	20 b3       	in	r18, 0x10	; 16
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	2a 3f       	cpi	r18, 0xFA	; 250
  66:	11 f0       	breq	.+4      	; 0x6c <Taster2_pressed+0xe>
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	else
		return 0;
}
  6c:	08 95       	ret

0000006e <main>:

int main(void)
{
	init();
  6e:	e4 df       	rcall	.-56     	; 0x38 <init>
	
    while (1) 
    {
		if(Taster1_pressed()) //0xfb -> PD2 gedrueckt
  70:	ea df       	rcall	.-44     	; 0x46 <Taster1_pressed>
  72:	89 2b       	or	r24, r25
  74:	11 f0       	breq	.+4      	; 0x7a <main+0xc>
			PORTB |= (1 << PB0);
  76:	c0 9a       	sbi	0x18, 0	; 24
  78:	fb cf       	rjmp	.-10     	; 0x70 <main+0x2>
		else if(Taster2_pressed())
  7a:	f1 df       	rcall	.-30     	; 0x5e <Taster2_pressed>
  7c:	89 2b       	or	r24, r25
  7e:	11 f0       	breq	.+4      	; 0x84 <main+0x16>
			PORTB |= (1 << PB1);
  80:	c1 9a       	sbi	0x18, 1	; 24
  82:	f6 cf       	rjmp	.-20     	; 0x70 <main+0x2>
		else
			PORTB = 0;
  84:	18 ba       	out	0x18, r1	; 24
  86:	f4 cf       	rjmp	.-24     	; 0x70 <main+0x2>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
