
Prak4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b4  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052e  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cd  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	34 d0       	rcall	.+104    	; 0x9c <main>
  34:	7d c0       	rjmp	.+250    	; 0x130 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <setUp>:
}

void waitUntil(int32_t ms){
	while(TCNT0 < ms)
		;
}
  38:	83 b7       	in	r24, 0x33	; 51
  3a:	85 60       	ori	r24, 0x05	; 5
  3c:	83 bf       	out	0x33, r24	; 51
  3e:	b8 9a       	sbi	0x17, 0	; 23
  40:	08 95       	ret

00000042 <waitFor>:

void waitFor(int32_t ms){
  42:	0f 93       	push	r16
  44:	1f 93       	push	r17
  46:	ab 01       	movw	r20, r22
  48:	bc 01       	movw	r22, r24
	if(TCNT0 + ms > 255){
  4a:	82 b7       	in	r24, 0x32	; 50
  4c:	8a 01       	movw	r16, r20
  4e:	9b 01       	movw	r18, r22
  50:	08 0f       	add	r16, r24
  52:	11 1d       	adc	r17, r1
  54:	21 1d       	adc	r18, r1
  56:	31 1d       	adc	r19, r1
  58:	0f 3f       	cpi	r16, 0xFF	; 255
  5a:	11 05       	cpc	r17, r1
  5c:	21 05       	cpc	r18, r1
  5e:	31 05       	cpc	r19, r1
  60:	89 f0       	breq	.+34     	; 0x84 <waitFor+0x42>
  62:	84 f0       	brlt	.+32     	; 0x84 <waitFor+0x42>
		ms = (TCNT0 + ms) % 255;
  64:	82 b7       	in	r24, 0x32	; 50
  66:	8a 01       	movw	r16, r20
  68:	9b 01       	movw	r18, r22
  6a:	08 0f       	add	r16, r24
  6c:	11 1d       	adc	r17, r1
  6e:	21 1d       	adc	r18, r1
  70:	31 1d       	adc	r19, r1
  72:	c9 01       	movw	r24, r18
  74:	b8 01       	movw	r22, r16
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	50 e0       	ldi	r21, 0x00	; 0
  7e:	1a d0       	rcall	.+52     	; 0xb4 <__divmodsi4>
  80:	ab 01       	movw	r20, r22
  82:	bc 01       	movw	r22, r24
	}
	while(TCNT0 < ms)
  84:	82 b7       	in	r24, 0x32	; 50
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	84 17       	cp	r24, r20
  8e:	95 07       	cpc	r25, r21
  90:	a6 07       	cpc	r26, r22
  92:	b7 07       	cpc	r27, r23
  94:	bc f3       	brlt	.-18     	; 0x84 <waitFor+0x42>
		;
}
  96:	1f 91       	pop	r17
  98:	0f 91       	pop	r16
  9a:	08 95       	ret

0000009c <main>:

int main(void)
{
	setUp();
  9c:	cd df       	rcall	.-102    	; 0x38 <setUp>
	
	while(1){
		waitFor(200);
		PORTB ^= (1 << 0);
  9e:	c1 e0       	ldi	r28, 0x01	; 1
int main(void)
{
	setUp();
	
	while(1){
		waitFor(200);
  a0:	68 ec       	ldi	r22, 0xC8	; 200
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	cc df       	rcall	.-104    	; 0x42 <waitFor>
		PORTB ^= (1 << 0);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8c 27       	eor	r24, r28
  ae:	88 bb       	out	0x18, r24	; 24
		TCNT0 = 0;
  b0:	12 be       	out	0x32, r1	; 50
  b2:	f6 cf       	rjmp	.-20     	; 0xa0 <main+0x4>

000000b4 <__divmodsi4>:
  b4:	05 2e       	mov	r0, r21
  b6:	97 fb       	bst	r25, 7
  b8:	16 f4       	brtc	.+4      	; 0xbe <__divmodsi4+0xa>
  ba:	00 94       	com	r0
  bc:	0f d0       	rcall	.+30     	; 0xdc <__negsi2>
  be:	57 fd       	sbrc	r21, 7
  c0:	05 d0       	rcall	.+10     	; 0xcc <__divmodsi4_neg2>
  c2:	14 d0       	rcall	.+40     	; 0xec <__udivmodsi4>
  c4:	07 fc       	sbrc	r0, 7
  c6:	02 d0       	rcall	.+4      	; 0xcc <__divmodsi4_neg2>
  c8:	46 f4       	brtc	.+16     	; 0xda <__divmodsi4_exit>
  ca:	08 c0       	rjmp	.+16     	; 0xdc <__negsi2>

000000cc <__divmodsi4_neg2>:
  cc:	50 95       	com	r21
  ce:	40 95       	com	r20
  d0:	30 95       	com	r19
  d2:	21 95       	neg	r18
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	4f 4f       	sbci	r20, 0xFF	; 255
  d8:	5f 4f       	sbci	r21, 0xFF	; 255

000000da <__divmodsi4_exit>:
  da:	08 95       	ret

000000dc <__negsi2>:
  dc:	90 95       	com	r25
  de:	80 95       	com	r24
  e0:	70 95       	com	r23
  e2:	61 95       	neg	r22
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	8f 4f       	sbci	r24, 0xFF	; 255
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	08 95       	ret

000000ec <__udivmodsi4>:
  ec:	a1 e2       	ldi	r26, 0x21	; 33
  ee:	1a 2e       	mov	r1, r26
  f0:	aa 1b       	sub	r26, r26
  f2:	bb 1b       	sub	r27, r27
  f4:	fd 01       	movw	r30, r26
  f6:	0d c0       	rjmp	.+26     	; 0x112 <__udivmodsi4_ep>

000000f8 <__udivmodsi4_loop>:
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	ee 1f       	adc	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	a2 17       	cp	r26, r18
 102:	b3 07       	cpc	r27, r19
 104:	e4 07       	cpc	r30, r20
 106:	f5 07       	cpc	r31, r21
 108:	20 f0       	brcs	.+8      	; 0x112 <__udivmodsi4_ep>
 10a:	a2 1b       	sub	r26, r18
 10c:	b3 0b       	sbc	r27, r19
 10e:	e4 0b       	sbc	r30, r20
 110:	f5 0b       	sbc	r31, r21

00000112 <__udivmodsi4_ep>:
 112:	66 1f       	adc	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	88 1f       	adc	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	1a 94       	dec	r1
 11c:	69 f7       	brne	.-38     	; 0xf8 <__udivmodsi4_loop>
 11e:	60 95       	com	r22
 120:	70 95       	com	r23
 122:	80 95       	com	r24
 124:	90 95       	com	r25
 126:	9b 01       	movw	r18, r22
 128:	ac 01       	movw	r20, r24
 12a:	bd 01       	movw	r22, r26
 12c:	cf 01       	movw	r24, r30
 12e:	08 95       	ret

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
