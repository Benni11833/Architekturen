
Prak4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061e  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056d  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027a  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f2  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b0  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6a d0       	rcall	.+212    	; 0x118 <main>
  44:	7d c0       	rjmp	.+250    	; 0x140 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint32_t system_clock = 0;

ISR(TIMER0_OVF_vect){
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
  56:	af 93       	push	r26
  58:	bf 93       	push	r27
	
	system_clock++;
  5a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  5e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  62:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  66:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	a1 1d       	adc	r26, r1
  6e:	b1 1d       	adc	r27, r1
  70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  74:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  78:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
  7c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
	
	TCNT0 = 255;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	82 bf       	out	0x32, r24	; 50
}
  84:	bf 91       	pop	r27
  86:	af 91       	pop	r26
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <setUp>:

void setUp(){
	cli();
  96:	f8 94       	cli
	TCCR0 &= 0b11111000;				// Lösche Bits 0-2 (Timer stopped)
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= ((1<<CS02) | (1<<CS00));	// CS00 und CS02 setzen: Teiler 1024
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 255;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<<TOIE0);				// Interrupt maskieren
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	89 bf       	out	0x39, r24	; 57
	
	DDRB |= ((1 << 0) | (1 << 1));
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	87 bb       	out	0x17, r24	; 23
	
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <waitUntil>:
}

void waitUntil(uint32_t ms){
  b8:	ab 01       	movw	r20, r22
  ba:	bc 01       	movw	r22, r24
	while(system_clock < ms)
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c4:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  c8:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  cc:	84 17       	cp	r24, r20
  ce:	95 07       	cpc	r25, r21
  d0:	a6 07       	cpc	r26, r22
  d2:	b7 07       	cpc	r27, r23
  d4:	98 f3       	brcs	.-26     	; 0xbc <waitUntil+0x4>
		;
}
  d6:	08 95       	ret

000000d8 <waitFor>:

void waitFor(uint32_t ms){
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
	uint32_t start_clock = system_clock;
  dc:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <_edata>
  e0:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <_edata+0x1>
  e4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <_edata+0x2>
  e8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_edata+0x3>
	while(system_clock < start_clock + ms)
  ec:	ab 01       	movw	r20, r22
  ee:	bc 01       	movw	r22, r24
  f0:	40 0f       	add	r20, r16
  f2:	51 1f       	adc	r21, r17
  f4:	62 1f       	adc	r22, r18
  f6:	73 1f       	adc	r23, r19
  f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 100:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 104:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 108:	84 17       	cp	r24, r20
 10a:	95 07       	cpc	r25, r21
 10c:	a6 07       	cpc	r26, r22
 10e:	b7 07       	cpc	r27, r23
 110:	98 f3       	brcs	.-26     	; 0xf8 <waitFor+0x20>
		;
}
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <main>:

int main(void)
{
	setUp();
 118:	be df       	rcall	.-132    	; 0x96 <setUp>
	
	waitUntil(500);
 11a:	64 ef       	ldi	r22, 0xF4	; 244
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ca df       	rcall	.-108    	; 0xb8 <waitUntil>
	PORTB ^= (1 << 1);
 124:	98 b3       	in	r25, 0x18	; 24
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	89 27       	eor	r24, r25
 12a:	88 bb       	out	0x18, r24	; 24
	
	while(1){
		waitFor(400);
		PORTB ^= (1 << 0);
 12c:	c1 e0       	ldi	r28, 0x01	; 1
	
	waitUntil(500);
	PORTB ^= (1 << 1);
	
	while(1){
		waitFor(400);
 12e:	60 e9       	ldi	r22, 0x90	; 144
 130:	71 e0       	ldi	r23, 0x01	; 1
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	d0 df       	rcall	.-96     	; 0xd8 <waitFor>
		PORTB ^= (1 << 0);
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	8c 27       	eor	r24, r28
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <main+0x16>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
